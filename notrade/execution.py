import datetime
import queue

from abc import ABCMeta, abstractmethod

from event import FillEvent, OrderEvent

class ExecutionHandler(object):
    """
    The ExecutionHandler handles the interation between a
    set of orders generated by a Portfolio and the ultimate
    set of Fill events that actually occur in the market.
    """

    __metaclass__ = ABCMeta

    @abstractmethod
    def execute_order(self, event):
        """
        Takes an OrderEvent and executes it, producing a
        FillEvent that gets placed into the Events queue.

        Parameters:
        event - an OrderEvent
        """
        raise NotImplementedError('execute_order() not implemented')

class SimulatedExecutionHandler(ExecutionHandler):
    """
    The simulated execution handler simply converts all order
    objects into their equivalent fill objects automatically
    without latency, slippage or fill-ratio issues

    This allows a straightforward "first go" test of any strategy
    before implementation with a more sophisticated execution
    handler.
    """

    def __init__(self, events):
        """
        INitializes the handler, setting the event queues up
        internally.

        Parameters:
        events - the queue of Event objects.
        """
        self.events = events

    def execute_order(self, event):
        """
        Simply converts OrderEvent objects into FillEvent objects
        naively, without latency, slippage or fill ratio problems.

        Parameters:
        event - Contains an Event object with order information.
        """
        if event.type == 'ORDER':
            fill_event = FillEvent(datetime.datetime.utcnow(), event.symbol,
                    'ARCA', event.quantity, event.direction, None)
            self.events.put(fill_event)
