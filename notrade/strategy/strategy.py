import datetime
import numpy as np
import pandas as pd
import Queue

from abs import ABCMeta, abstractmethod

from ..event import SignalEvent

class Strategy(object):
    """
    Strategy is an abstract base class providing an interface for
    all subsequent (inherited) strategy handling objects.

    THe goal of a Strategy object is to generate Signal objects
    for particular symbols based on the inputs of Bars (OLHCVI)
    generated by a DataHandler object.
    """

    __metaclass__ = ABCMeta

    @abstractmethod
    def calculate_signals(self):
        """ Calculates signals based on bars given during the constructor. """
        raise NotImplementedError('calculate_signals() not implemented')

class BuyAndHoldStrategy(Strategy):
    """
    Simple strategy that LONGs all symbols as soon as a bar is recieved.
    It will never exit a position.

    Used for testing.
    """

    def __init__(self, bars, events):
        """
        Initializes the buy and hold strategy.

        Parameters:
        bars - The DataHandler object that provides bar information
        events - the event queue object.
        """
        self.bars = bars
        self.symbol_list = self.bars.symbol_list
        self.events = events

        # Once buy and hold signal is given, boolen in dictionary set to True
        self.bought = {symbol: False for symbol in self.symbol_list}

    def calculate_symbols(self):
        """
        Generate a single buy signal for each symbol.

        Parameters
        event - An Event object.
        """
        if event.type == 'MARKET':
            for s in self.symbol_list:
                bars = self.bars.get_latest_bars(s, N=1)
                if bars:
                    # (Symbol, Datetime, Type = LONG, SHORT or EXIT)
                    signal = SignalEvent(bars[0][0], bars[0][1], 'LONG')
                    self.events.put(signal)
                    self.bought[s] = True

